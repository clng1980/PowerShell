Function EndPSS { Get-PSSession | Remove-PSSession }

#########################################################################################################################################################################
Function List-Scripts
{
Clear-Host
Write-Host "##########################################################################################################" -foregroundcolor Yellow
Write-Host "Type 'help' at any point to go back to the main menu" -foregroundcolor Green
Write-Host "e = Launch Windows Explorer" -foregroundcolor Yellow
Write-Host "getinstalledprinters = Prompts for a remote PC name and retrieves a list of that PC's printers" -foregroundcolor Yellow
Write-Host "getinstalledsoftware = Prompts for a remote PC name and retrieves a list of software installed on that PC" -foregroundcolor Yellow
Write-Host "registerscheduledtasks = Registers new scheduled tasks CleanMgr, Flush DNS and ARP Cache Clear" -foregroundcolor Yellow
Write-Host "randompassword = Generates a random 10-character password you can use for protecting BH ZIP files" -foregroundcolor Yellow
Write-Host "aduserslast7days = List AD users created in the last 7 days" -foregroundcolor Yellow
Write-Host "getfreespace = Get free drive space for a remote PC name" -foregroundcolor Yellow
Write-Host "adpasswordexpiries = List AD password expiry date and time for all AD users" -foregroundcolor Yellow
Write-Host "get-aduserlastlogon = Get last time an AD user logged on (format: Get-ADUserLastLogon -UserName eldridgej)" -foregroundcolor Yellow
Write-Host "saasclients = Get last time all AD users for BH SaaS clients logged on" -foregroundcolor Yellow
Write-Host "createsagecompanyfile = Create latest Sage Accs Line 50 company file" -foregroundcolor Yellow
Write-Host "wetransferlinks = Useful WeTransfer non-expiry links" -foregroundcolor Yellow
Write-Host "usefulwebsites = Useful Website links" -foregroundcolor Yellow
Write-Host "createfirewallrules = Create firewall rules" -foregroundcolor Yellow
Write-Host "clearteamscache = Clear Microsoft Teams Cache" -foregroundcolor Yellow
Write-Host "clearchromecache = Clear Google Chrome Cache" -foregroundcolor Yellow
Write-Host "windows10debloater = Run Windows 10 debloater script" -foregroundcolor Yellow
Write-Host "christitusdebloat = Run Windows 10 Chris Titus debloat script" -foregroundcolor Yellow																			 
Write-Host "##########################################################################################################" -foregroundcolor Yellow
}
#########################################################################################################################################################################

#########################################################################################################################################################################
Function List-UsefulWebsites
{
Clear-Host
Write-Host "##########################################################################################################" -foregroundcolor Yellow
Write-Host "Type 'help' at any point to go back to the main menu" -foregroundcolor Green
Write-Host "sharepoint - Open BH Sharepoint website" -foregroundcolor Yellow
Write-Host "sageupdates - Open Sage Updates website" -foregroundcolor Yellow
Write-Host "bitdefender - Open BitDefender Admin console" -foregroundcolor Yellow
Write-Host "agilico - Open Agilico (BH printers) Support Portal" -foregroundcolor Yellow
Write-Host "sagepartner - Open Sage Accounting Partner Edition" -foregroundcolor Yellow
Write-Host "qbonline - Open QuickBooks Online Accountant portal" -foregroundcolor Yellow
Write-Host "vcsupport - Open Virtual Cabinet support desk" -foregroundcolor Yellow
Write-Host "##########################################################################################################" -foregroundcolor Yellow
}
#########################################################################################################################################################################

#########################################################################################################################################################################
Function Open-Website-BHSharepoint { Start-Process "https://burgesshodgson.sharepoint.com/sites/IT/Shared%20Documents/Forms/AllItems.aspx" }
#########################################################################################################################################################################
Function Open-Website-SageUpdates { Start-Process "https://my.sage.co.uk/public/help/askarticle.aspx?articleid=26323" }
#########################################################################################################################################################################
#https://my.sage.co.uk/downloadcentre
#########################################################################################################################################################################
Function Open-Website-BitDefender { Start-Process "https://192.168.20.51/" }
#########################################################################################################################################################################
Function Open-Website-Exclaimer { Start-Process "https://portal.exclaimer.com/new/" }
#########################################################################################################################################################################
Function Open-Website-Agilico { Start-Process "https://www.agilico.co.uk/request-support/" }
#########################################################################################################################################################################
Function Open-Website-SageAccountingPartnerEdition { Start-Process "https://central.uk.sageone.com/session/authorize/cloudid" }
#########################################################################################################################################################################
Function Open-Website-QuickBooksOnlineAccountant { Start-Process "https://qbo.intuit.com/c1/v1608.1641/0/login?redirect=true&accountant-sign-in=&redirect=true&locale=en_gb/" }
#########################################################################################################################################################################
Function Open-Website-VCSupport { Start-Process "https://virtualcabinet.zendesk.com/hc/en-us" }

#########################################################################################################################################################################
Function Launch-Explorer { ii c:\ }
#########################################################################################################################################################################

Function Get-Installed-Printers
{
$computername = Read-Host -Prompt 'Get installed printers on which PC?'
if (Test-Connection -Computername $computername -BufferSize 16 -Count 1 -Quiet) 
    {
    Get-WMIObject Win32_Printer -ComputerName $computername
    }
}

#########################################################################################################################################################################
Function Get-ADUserAllSaaSClientLastLogons
{
#write-output $("{0,15} {1,20} {2,20}" -f "Username", "Description", "Last Logged On")

$Users = @('LateSail','LateSail1', 'eldridgej', 'morrisona', 'okeefes', 'cookv', 'thompsona', 'dealec_1', 'dealec_2', 'dealec_3', 'batchelorl', 'blackwella', 'blackwelll', 'bastables', 'kadwill_r', 'allen_d', 'friend_m', 'mcnally_c', 'shaw_f', 'moss_h', 'panzer', 'evak', 'river_profiles', 'river_profiles1', 'rtlssage', 'stonerock', 'ray.brough')
#$properties = @(ForEach ($User in $Users){Get-ADUserLastLogon -UserName $User})
$properties = @(ForEach ($User in $Users){Get-ADUserLastLogon -UserName $User})
$properties
#$a = $properties.split(' ')
$a
#$b
#$c

#$resultlogon=@()
#$resultlogon = ForEach ($property in $properties) {
#$property.Name
#$Object = @{} | select UserName, Description, LastLoggedOn
#$Object.UserName = $property.Name
#}
#$resultlogon





#foreach ($property in $properties) {
#$resultlogon+=New-Object -TypeName PSObject -Property ([ordered]@{
 
#'User' = $properties[1]
#'DC' = $properties[2]
#'LastLogon' = $properties[3]
 
#})
#}

#$resultlogon


#ForEach-Object {
#$properties = $_.split('/')
#}
#$properties
#$Object = 
#    [PSCustomObject]@{
#     OU = $properties[1]
#     Where = $properties[2]
#     Type = $properties[3]
#     }
#$Object
#$lastName = @('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27')
#foreach ($value in $properties)
#{
#Write-Host $value
#}

#[int]$max = $properties.count
#$Results = for ( $i = 0; $i -lt $max; $i++)
#{
#Write-Verbose "$($properties[$i]),$($lastName[$i])"
#[PSCustomObject]@{
#FirstName = $properties[$i]
#LastName = $lastName[$i]
#}
#}
#$Results

#Get-ADUserLastLogon -UserName LateSail #LateSail SaaS
#Get-ADUserLastLogon -UserName LateSail1 #LateSail SaaS
#Get-ADUserLastLogon -UserName eldridgej #MNP SaaS
#Get-ADUserLastLogon -UserName morrisona #MNP SaaS
#Get-ADUserLastLogon -UserName okeefes #MNP SaaS
#Get-ADUserLastLogon -UserName cookv #MNP SaaS
#Get-ADUserLastLogon -UserName thompsona  #Dealec SaaS
#Get-ADUserLastLogon -UserName dealec_1 #Dealec SaaS
#Get-ADUserLastLogon -UserName dealec_2 #Dealec SaaS
#Get-ADUserLastLogon -UserName dealec_3 #Dealec SaaS
#Get-ADUserLastLogon -UserName batchelorl #Dealec SaaS
#Get-ADUserLastLogon -UserName blackwella #Dealec SaaS
#Get-ADUserLastLogon -UserName blackwelll #Dealec SaaS
#Get-ADUserLastLogon -UserName bastables #Dealec SaaS
#Get-ADUserLastLogon -UserName kadwill_r #LTH SaaS
#Get-ADUserLastLogon -UserName allen_d #LTH SaaS
#Get-ADUserLastLogon -UserName friend_m #LTH SaaS
#Get-ADUserLastLogon -UserName mcnally_c #LTH SaaS
#Get-ADUserLastLogon -UserName shaw_f #LTH SaaS
#Get-ADUserLastLogon -UserName moss_h #LTH SaaS
#Get-ADUserLastLogon -UserName panzer #Panzer SaaS
#Get-ADUserLastLogon -UserName evak #Panzer SaaS
#Get-ADUserLastLogon -UserName river_profiles #River Profiles SaaS
#Get-ADUserLastLogon -UserName river_profiles1 #River Profiles SaaS
#Get-ADUserLastLogon -UserName rtlssage #RTLS SaaS
#Get-ADUserLastLogon -UserName stonerock #Stonerock SaaS
#Get-ADUserLastLogon -UserName ray.brough #Navarino SaaS
}
#########################################################################################################################################################################

#########################################################################################################################################################################
Function AD-Password-Expiries
{
# https://blogs.technet.microsoft.com/poshchap/2014/02/21/one-liner-get-a-list-of-ad-users-password-expiry-dates/
# https://stackoverflow.com/questions/48068348/sorting-get-aduser-output-by-password-expiry-date
Get-ADUser -filter {Enabled -eq $True -and PasswordNeverExpires -eq $False} `
-Properties "DisplayName", "msDS-UserPasswordExpiryTimeComputed" `
| Select-Object -Property "Displayname",@{Name="ExpiryDate";Expression={[datetime]::FromFileTime($_."msDS-UserPasswordExpiryTimeComputed")}} `
| sort-object -property ExpiryDate
}
#########################################################################################################################################################################

#########################################################################################################################################################################
Function List-WeTransferLinks
{
Clear-Host
Write-Host "##########################################################################################################" -foregroundcolor Yellow
Write-Host "Type 'help' at any point to go back to the main menu" -foregroundcolor Green
Write-Host "Sage50Accounts_v27_FullProgram.exe - https://we.tl/t-FEoiLuohLr" -foregroundcolor Yellow
Write-Host "clear_browser_caches.ps1 - https://we.tl/t-MIlrzTrpuT" -foregroundcolor Yellow
Write-Host "QuickBooksUK2021.exe - https://we.tl/t-zpVFymG2M7" -foregroundcolor Yellow
Write-Host "BH vWorkspace Installer.zip - https://we.tl/t-h0CT24LbdT" -foregroundcolor Yellow
Write-Host "Sage 50 Accs \ Payroll \ APA Updates - https://my.sage.co.uk/downloadcentre" -foregroundcolor Yellow
Write-Host "##########################################################################################################" -foregroundcolor Yellow
}
#########################################################################################################################################################################

#########################################################################################################################################################################
Function Get-Installed-Software 
{
$computername = Read-Host -Prompt 'Get installed software on which PC?'
if (Test-Connection -Computername $computername -BufferSize 16 -Count 1 -Quiet) 
    {
    Start-Process -Filepath "$PSExec" -ArgumentList "\\$ComputerName -s powershell Enable-PSRemoting -Force"
    Enable-RemoteRegistry -ComputerName $computername
    Get-InstalledSoftware $computername | Select Name, Version, InstallDate | Sort -Unique Name | FT -AutoSize | Out-String -Width 300
    Stop-Service -InputObject (Get-Service -Name RemoteRegistry -ComputerName $computername) -ErrorAction Stop
    Set-Service -Name RemoteRegistry -ComputerName $computername -StartupType Disabled -ErrorAction Stop
    }
else 
    {Write-Host "$computername is not turned on"}
}
#########################################################################################################################################################################

#########################################################################################################################################################################
Function AD-Users-Created-In-Last-7-Days { Get-ADUser -Filter "created -gt '$((Get-Date).AddDays(-7).ToShortDateString())'" }
#########################################################################################################################################################################

#########################################################################################################################################################################
Function Generate-Random-Password
{
#https://adamtheautomator.com/powershell-random-password/
$minLength = 10; ## characters
$maxLength = 11; ## characters
$length = Get-Random -Minimum $minLength -Maximum $maxLength;
$nonAlphaChars = 5;
$password = [System.Web.Security.Membership]::GeneratePassword($length, $nonAlphaChars);
Write-Host $password
}
#########################################################################################################################################################################

#########################################################################################################################################################################
Function Get-Free-Drive-Space
{
$computername = Read-Host -Prompt 'Get free disk space on which PC?'
if (Test-Connection -Computername $computername -BufferSize 16 -Count 1 -Quiet) 
    {
Get-wmiobject -computername $computername win32_logicaldisk -filter "drivetype='3'" | select @{Name="Computer Name";expression={$_.SystemName}},@{Name="Drive";expression={$_.deviceID}},@{Name="Volume Name";expression={$_.VolumeName}} ,@{Name="Free(GB)";expression={[math]::truncate($_.freespace/1.0GB)}},@{Name="% Free";Expression={[math]::truncate(($_.FreeSpace/$_.Size)*100)}}, @{Name="Total(GB)";expression={[math]::truncate($_.Size/1.0GB)}} | format-table -autosize
    }
}
#########################################################################################################################################################################

#########################################################################################################################################################################
Function Get-ADUserLastLogon([string]$userName)
{
$dcs = Get-ADDomainController -Filter {Name -like "*"}
$time = 0
foreach($dc in $dcs)
{
   $hostname = $dc.HostName
   $user = Get-ADUser $userName -Server $hostname | Get-ADObject -Properties lastLogon, Description
   if($user.LastLogon -gt $time)
   {
      $time = $user.LastLogon
      $description = $user.Description
   }
}
$dt = [DateTime]::FromFileTime($time)
#"{0:MM/dd/yyyy HH:mm}" -f $dt
#Write-Host "$username | $description | $dt"
$out = new-object psobject;
$out | add-member noteproperty Username $username
$out | add-member noteproperty Description $description
$out | add-member noteproperty LastLoggedOn $dt
write-output $("{0,15} {1,20} {2,20}" -f $out.Username,$out.Description,$out.LastLoggedOn)
}
#########################################################################################################################################################################

#########################################################################################################################################################################
#Function Register-Scheduled-Tasks
#{
#$Trigger= New-ScheduledTaskTrigger -At 09:30am -Daily
#$User= "NT AUTHORITY\SYSTEM"
#$Action= New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "C:\Users\granthamc\Documents\WindowsPowerShell\Scheduled Task Scripts\Ping-BHWorkstations.ps1"
#Register-ScheduledTask -TaskName "Ping-BH-Workstations" -Trigger $Trigger -User $User -Action $Action -RunLevel Highest -Force
#
#$Trigger= New-ScheduledTaskTrigger -At 05:15pm -Daily
#$User= "NT AUTHORITY\SYSTEM"
#$Action= New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "C:\Users\granthamc\Documents\WindowsPowerShell\Scheduled Task Scripts\Rename-MultipleComputers.ps1"
#Register-ScheduledTask -TaskName "Rename-MultipleComputers" -Trigger $Trigger -User $User -Action $Action -RunLevel Highest -Force
#}
#########################################################################################################################################################################

#########################################################################################################################################################################
Function SageCompanyFileMenu
{
    Clear-Host        
    Do
    {
        Clear-Host                                                                       
        Write-Host -Object 'Please choose an option'
        Write-Host -Object '********************************'
        Write-Host -Object 'Sage 50 Accs U Drive Company File Creation' -ForegroundColor Yellow
        Write-Host -Object '********************************'
        Write-Host -Object '1.  Create BH Line 50 v28 Company File On U Drive '
        Write-Host -Object ''
        Write-Host -Object '2.  Create BH Line 50 v27 Company File On U Drive '
        Write-Host -Object ''
        Write-Host -Object '3.  Create BH Line 50 v26 Company File On U Drive '
        Write-Host -Object ''
        Write-Host -Object '4.  Create BH Line 50 v25 Company File On U Drive '
        Write-Host -Object '********************************'
        Write-Host -Object 'Sage 50 Accs Merge U Drive & C Drive Companies' -ForegroundColor Yellow
        Write-Host -Object '********************************'
        Write-Host -Object '5.  Merge Sage Companies On RDSH4 For BH Line 50 v28 '
        Write-Host -Object ''
        Write-Host -Object '6.  Merge Sage Companies On RDSH4 For BH Line 50 v27 '
        Write-Host -Object ''
        Write-Host -Object '7.  Merge Sage Companies On RDSH5 For BH Line 50 v28 '
        Write-Host -Object ''
        Write-Host -Object '8.  Merge Sage Companies On RDSH5 For BH Line 50 v27 '
        Write-Host -Object ''
        Write-Host -Object '9.  Merge Sage Companies On RDSH6 For BH Line 50 v28 '
        Write-Host -Object ''
        Write-Host -Object '10.  Merge Sage Companies On RDSH6 For BH Line 50 v27 '
        Write-Host -Object ''																				  															 
        Write-Host -Object 'Q.  Quit'
        Write-Host -Object $errout
        $Menu = Read-Host -Prompt '(1-10 or Q to Quit)'
         switch ($Menu) 
        {
           1 {Output-SageCompanyFile -SageVersionNo "28"}
           2 {Output-SageCompanyFile -SageVersionNo "27"}
           3 {Output-SageCompanyFile -SageVersionNo "26"}
           4 {Output-SageCompanyFile -SageVersionNo "25"}
           5 {Output-SageCompanyFileForVWorkspace -SageVersionNo 28 -BHRDSHServerNo 4}
           6 {Output-SageCompanyFileForVWorkspace -SageVersionNo 27 -BHRDSHServerNo 4}
           7 {Output-SageCompanyFileForVWorkspace -SageVersionNo 28 -BHRDSHServerNo 5}
           8 {Output-SageCompanyFileForVWorkspace -SageVersionNo 27 -BHRDSHServerNo 5}
           9 {Output-SageCompanyFileForVWorkspace -SageVersionNo 28 -BHRDSHServerNo 6}
           10 {Output-SageCompanyFileForVWorkspace -SageVersionNo 27 -BHRDSHServerNo 6}
           Q {Clear-Host EndPSS help }   
           default { $errout = 'Invalid option please try again........Try 1-10 or Q only' }
         }
    }
    until ($Menu -eq 'q')
}   
#########################################################################################################################################################################

######################################################################################################################################################################### 
function Output-SageCompanyFile {
 param( [int]$SageVersionNo )
$dirpath = "\\apps\BH_LINE50\BH Line 50 v" + $SageVersionNo
[array]$files=Get-ChildItem -Directory -Path $dirpath -Recurse -Depth 2 | ForEach-Object -Process {$_.FullName}
$myArray = @()
$myArray3 = @("*ACCDATA*", "*REPORTS*", "*BITMAP*", "*CONFIGS*", "*CRITERIA*", "*DEFAULTS*", "*FAX*", "*HMRCSubmissions*", "*INVOICES*", "*JOURNALS*", "*LABELS*", "*LAYOUTS*", "*LETTERS*", "*MEMO*", "*TASKOPT*", "*Template*", "*TMail*", "*VATRTNS*", "*ARCHIVES*", "*Attachments*", "*TEMPLATE*", "*vatrtns*", "*Old Layouts*", "*ATTACHMENTS*", "*hmrcsubmissions*", "*DemoData*", "*Bitmaps*", "*HTML*", "*HTMLHELP*", "*Images*", "*New folder*", "*attachments*", "*transaction attachments*", "*ECSL Archives*", "*RCSL Archive*s", "*VATRtns*", "*cis*", "*Import Maps*", "*accdata*", "*CIS*", "*dotnet32*", "*dotnet64*", "*Imports*", "*Exports*", "*LETTER*", "*Bank*", "*Customer*", "*Supplier*", "*dashboards*")
$myArray4 = @("\\granthamc\BROADSCAFF", "\\granthamc\DIRTBUSTERSONLINE261121", "\\granthamc\G&C CANTERBURY HOLDINGS LTD ONLINE", "\\granthamc\GAS NETWORK SERVICES LTD ONLINE", "\\granthamc\I&G GAS HOLDINGS LTD ONLINE", "\\granthamc\MCLAUGHKENT", "\\granthamc\NETIV UTILITAS ONLINE", "\\granthamc\ORBITAL NET LTD 2021-08-05 14-56-07", "\\granthamc\STURRY DR MOLONEY ONLINE")
$myArray5 = @("\\granthamc\I&G CONTRACTORS LTD ONLINE", "\\granthamc\DIRTBUSTERSONLINE261121")
$temp2 = $env:TEMP + "\COMPANYV" + $SageVersionNo + "NEW.txt"
$Destination = "\\apps\BH_LINE50\BH Line 50 v" + $SageVersionNo + "\COMPANYV" + $SageVersionNo + "NEW.txt"
foreach($Item in $files)
{
   	$myArray3Matches = $myArray3 | Where { $item -like $_ }
   	if (-not $myArray3Matches) {$myArray += $item}}
   	If ($SageVersionNo -eq "27") { foreach($Item in $myArray4) {$myArray +=$item}}
   	If ($SageVersionNo -eq "28") { foreach($Item in $myArray5) {$myArray +=$item}}
   	$myArray = $myArray | sort
	#Out-File -FilePath $Destination -InputObject $myArray
	$stream = [System.IO.StreamWriter] $Destination
	$myArray | %{$stream.WriteLine($_)}
	$stream.Close()																																			   
   	Write-Host "Created file can be found at: " $Destination
   	Write-Host -NoNewline -Object 'Press any key to return to the main menu...' -ForegroundColor Yellow
   	$null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown')
}
#########################################################################################################################################################################

#########################################################################################################################################################################
function Output-SageCompanyFileForVWorkspace {
param([int] $SageVersionNo, [int] $BHRDSHServerNo)
if ($SageVersionNo -eq "27") { $SageDirPathYear = "2021" }
if ($SageVersionNo -eq "28") { $SageDirPathYear = "2022" }
$APPSCOMPANYFILE = "\\apps\BH_LINE50\BH Line 50 v" + $SageVersionNo + "\COMPANYV" + $SageVersionNo + "NEW.txt"
$RDSHCOMPANYFILE = "\\rdsh" + $BHRDSHServerNo + "\c$\ProgramData\Sage\Accounts\" + $SageDirPathYear + "\COMPANY"
#$stream_reader = New-Object System.IO.StreamReader{\\rdsh4\c$\ProgramData\Sage\Accounts\2021\COMPANY}
$stream_reader = New-Object System.IO.StreamReader($RDSHCOMPANYFILE)
$lines = @()
$line_number = 1
while (($current_line =$stream_reader.ReadLine()) -ne $null)
{
if ($current_line -like '*programdata*') { $lines += $current_line }
$line_number++
}
$stream_reader2 = New-Object System.IO.StreamReader($APPSCOMPANYFILE)
$aa = $lines + $stream_reader2.ReadToEnd()
$stream_reader.Close()
$stream_reader2.Close()
#$aa | Out-File $outfile
#$Destination = $env:TEMP + "\COMPANYV" + $SageVersionNo + "NEW_RDSH" + $BHRDSHServerNo + ".txt"
#$stream = [System.IO.StreamWriter] $Destination
$stream = [System.IO.StreamWriter] $RDSHCOMPANYFILE
$aa | %{$stream.WriteLine($_)}
$stream.Close()
Write-Host "Created file can be found at: " $RDSHCOMPANYFILE
Write-Host -NoNewline -Object 'Press any key to return to the main menu...' -ForegroundColor Yellow 	
$null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown')
}
#########################################################################################################################################################################

#########################################################################################################################################################################											  																																								 
function Output-SageCompanyFileOnDriveC()
{
	param([string] $SageVersionNo, [string] $BHRDSHServerNo)
	if ($SageVersionNo -eq "27") { $SageDirPathYear = "2021" }
	if ($SageVersionNo -eq "28") { $SageDirPathYear = "2022" }
	$UDrivePath = "\\apps\BH_LINE50\BH Line 50 v" + $SageVersionNo + "\COMPANYV" + $SageVersionNo + "NEW.txt"
	write-host $UDrivePath;
	$CDrivePath = "\\rdsh" + $BHRDSHServerNo + "\c$\ProgramData\Sage\Accounts\" + $SageDirPathYear + "\COMPANY"
	write-host $CDrivePath;
	$UDriveCompanies = Get-Content $UDrivePath
	$CDriveCompanies = Get-Content $CDrivePath | Where-Object { $_ -like "*PROGRAMDATA*" }
	$AllCompanies = $CDriveCompanies + $UDriveCompanies
	Out-File -FilePath $CDrivePath -InputObject $AllCompanies
   	Write-Host -NoNewline -Object 'Press any key to return to the main menu...' -ForegroundColor Yellow
   	$null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown')
}
#########################################################################################################################################################################

#########################################################################################################################################################################
function unInstallTeams($path) {
  $clientInstaller = "$($path)\Update.exe"
   try {
        $process = Start-Process -FilePath "$clientInstaller" -ArgumentList "--uninstall /s" -PassThru -Wait -ErrorAction STOP
        if ($process.ExitCode -ne 0)
    {
      Write-Error "UnInstallation failed with exit code  $($process.ExitCode)."
        }
    }
    catch {
        Write-Error $_.Exception.Message
    }
}
#########################################################################################################################################################################

#########################################################################################################################################################################
function clearteamscache{    
    Write-Host "Stopping Teams Process" -ForegroundColor Yellow

    try{
        Get-Process -ProcessName Teams | Stop-Process -Force
        Start-Sleep -Seconds 3
        Write-Host "Teams Process Sucessfully Stopped" -ForegroundColor Green
    }catch{
        echo $_
    }
    
    Write-Host "Clearing Teams Disk Cache" -ForegroundColor Yellow

    try{
        Get-ChildItem -Path $env:APPDATA\"Microsoft\teams\application cache\cache" | Remove-Item -Confirm:$false
        Get-ChildItem -Path $env:APPDATA\"Microsoft\teams\blob_storage" | Remove-Item -Confirm:$false
        Get-ChildItem -Path $env:APPDATA\"Microsoft\teams\databases" | Remove-Item -Confirm:$false
        Get-ChildItem -Path $env:APPDATA\"Microsoft\teams\cache" | Remove-Item -Confirm:$false
        Get-ChildItem -Path $env:APPDATA\"Microsoft\teams\gpucache" | Remove-Item -Confirm:$false
        Get-ChildItem -Path $env:APPDATA\"Microsoft\teams\Indexeddb" | Remove-Item -Confirm:$false
        Get-ChildItem -Path $env:APPDATA\"Microsoft\teams\Local Storage" | Remove-Item -Confirm:$false
        Get-ChildItem -Path $env:APPDATA\"Microsoft\teams\tmp" | Remove-Item -Confirm:$false
        Write-Host "Teams Disk Cache Cleaned" -ForegroundColor Green
    }catch{
        echo $_
    }

    Write-Host "Stopping Chrome Process" -ForegroundColor Yellow

    try{
        Get-Process -ProcessName Chrome| Stop-Process -Force
        Start-Sleep -Seconds 3
        Write-Host "Chrome Process Sucessfully Stopped" -ForegroundColor Green
    }catch{
        echo $_
    }

    Write-Host "Clearing Chrome Cache" -ForegroundColor Yellow
    
    try{
        Get-ChildItem -Path $env:LOCALAPPDATA"\Google\Chrome\User Data\Default\Cache" | Remove-Item -Confirm:$false
        Get-ChildItem -Path $env:LOCALAPPDATA"\Google\Chrome\User Data\Default\Cookies" -File | Remove-Item -Confirm:$false
        Get-ChildItem -Path $env:LOCALAPPDATA"\Google\Chrome\User Data\Default\Web Data" -File | Remove-Item -Confirm:$false
        Write-Host "Chrome Cleaned" -ForegroundColor Green
    }catch{
        echo $_
    }
    
    Write-Host "Stopping IE Process" -ForegroundColor Yellow
    
    try{
        Get-Process -ProcessName MicrosoftEdge | Stop-Process -Force
        Get-Process -ProcessName IExplore | Stop-Process -Force
        Write-Host "Internet Explorer and Edge Processes Sucessfully Stopped" -ForegroundColor Green
    }catch{
        echo $_
    }

    Write-Host "Clearing IE Cache" -ForegroundColor Yellow
    
    try{
        RunDll32.exe InetCpl.cpl, ClearMyTracksByProcess 8
        RunDll32.exe InetCpl.cpl, ClearMyTracksByProcess 2
        Write-Host "IE and Edge Cleaned" -ForegroundColor Green
    }catch{
        echo $_
    }

    Write-Host "Cleanup Complete..." -ForegroundColor Green
}
#########################################################################################################################################################################

#########################################################################################################################################################################
function teamsuninstall{
   Write-Host "Removing Teams Machine-wide Installer" -ForegroundColor Yellow
    $MachineWide = Get-WmiObject -Class Win32_Product | Where-Object{$_.Name -eq "Teams Machine-Wide Installer"}
    $MachineWide.Uninstall()
    #Locate installation folder
    $localAppData = "$($env:LOCALAPPDATA)\Microsoft\Teams"
    $programData = "$($env:ProgramData)\$($env:USERNAME)\Microsoft\Teams"
    If (Test-Path "$($localAppData)\Current\Teams.exe") 
    {
      unInstallTeams($localAppData)
     }
    elseif (Test-Path "$($programData)\Current\Teams.exe") {
      unInstallTeams($programData)
    }
    else {
      Write-Warning  "Teams installation not found"
    }
}
#########################################################################################################################################################################

#########################################################################################################################################################################
function Get-ComputerModel
{
<#
.SYNOPSIS
   Get model of remote computer.

.DESCRIPTION
    This function will get the model and Manufacturer of a remote computer by using the "get-wmiobject Win32_ComputerSystem" command.

.EXAMPLE
   Get-ComputerModel -Computername computer1

   Get's the model for computer1.

.EXAMPLE
   Get-ComputerModel -Computername computer1 -credential (Get-Credential)

   Get's the model for computer1 and prompts for the credentials to use.

.EXAMPLE
   Get-ComputerModel -Computername computer1 | Format-Table

   Get's the model for computer1 and formats output into table.

.EXAMPLE
   Get-ComputerModel -Computername Computer1,Computer2 | Export-Csv -Path C:\test.csv -NoTypeInformation

   Get's the model for computer1 and computer2 and exports it to a CSV file.

.EXAMPLE
   Get-ADDomainController -Filter * | Get-ComputerModel

   This examples get's the computer models of all DC's.  It requires the get-addomaincontroller Active Directory module.

.NOTES

.LINK
    
#>
    [CmdletBinding()]
    Param
    (
        #The Computername/IP Address of the remote computer.
        [Parameter(Mandatory=$true,
                   ValueFromPipelineByPropertyName=$true,
                   ValueFromPipeline=$true,
                   Position=0)]
        [Alias('Name', 'IPv4Address', 'CN')]
        [string[]]$Computername,

        [Parameter(Mandatory=$False)]
        [System.Management.Automation.PSCredential]$credential
    )

    Begin
    {
    }
    Process
    {

    $Computername | ForEach-Object {
        $parms = @{}
        if ($credential) { $parms.Add('Credential', $credential)}

        $Results = @{"Status"=""
                        "Name"="$_"
                        "Manufacturer"=""
                        "Model"=""}     

        Write-Verbose -Message "Checking to see if $_ is online..."
        If (Test-Connection -ComputerName $_ -Count 1 -Quiet -BufferSize 100 ) {       
            try {
                Write-Verbose -Message "Running WMI query on $_"
                $computerResults = Get-WMIObject -ComputerName $_ -class Win32_ComputerSystem @parms -ErrorAction Stop

                $Results["Status"] = "Online"
                $Results["Manufacturer"] = "$($computerResults.Manufacturer)"
                $Results["Model"] = $($computerResults.Model)

            } catch {
                $Results["Status"] = "Failed: $($_.Exception.Message)"
            }
        }
        Else {
            $Results["Status"] = "Failed: $Computername is Offline."
        }

        return New-Object PSobject -Property $Results | Select-Object Name, Model, Manufacturer, Status
    }


    }
    End
    {
    }
}
#########################################################################################################################################################################

#########################################################################################################################################################################
#https://jfrmilner.wordpress.com/2012/12/22/powershell-quick-tip-03-whats-my-external-ip-address-windows-command-line/
#https://blog.kaniski.eu/2019/07/
function Get-ExternalIP {
#(Invoke-WebRequest ifconfig.me/ip).Content
($($(Invoke-WebRequest -Uri "http://checkip.dyndns.org").ParsedHtml.getElementsByTagName('body')).innerText).TrimStart("Current IP Address: ")
}
#########################################################################################################################################################################

#########################################################################################################################################################################
Function Get-DirectoryTreeSize {
<#
.SYNOPSIS
    This is used to get the file count, subdirectory count and folder size for the path specified. The output will show the current folder stats unless you specify the "AllItemsAndAllFolders" property.
    Since this uses Get-ChildItem as the underlying structure, this supports local paths, network UNC paths and mapped drives.
 
.NOTES
    Name: Get-DirectoryTreeSize
    Author: theSysadminChannel
    Version: 1.0
    DateCreated: 2020-Feb-11
 
 
.LINK
    https://thesysadminchannel.com/get-directory-tree-size-using-powershell -
 
 
.PARAMETER Recurse
    Using this parameter will drill down to the end of the folder structure and output the filecount, foldercount and size of each folder respectively.
 
.PARAMETER AllItemsAndAllFolders
    Using this parameter will get the total file count, total directory count and total folder size in MB for everything under that directory recursively.
 
.EXAMPLE
    Get-DirectoryTreeSize "C:\Some\Folder"
 
    Path            FileCount DirectoryCount FolderSizeInMB
    ----            --------- -------------- --------------
    C:\Some\folder          3              3          0.002
 
.EXAMPLE
    Get-DirectoryTreeSize "\\MyServer\Folder" -Recurse
 
    Path                 FileCount DirectoryCount FolderSizeInMB
    ----                 --------- -------------- --------------
    \\MyServer\Folder            2              1         40.082
    .\Subfolder                  1              0         26.555
 
.EXAMPLE
    Get-DirectoryTreeSize "Z:\MyMapped\folder" -AllItemsAndAllFolders
 
    Path                  TotalFileCount TotalDirectoryCount TotalFolderSizeInMB
    ----                  -------------- ------------------- -------------------
    Z:\MyMapped\folder                 3                   1              68.492
 
#>
 
[CmdletBinding(DefaultParameterSetName="Default")]
 
param(
    [Parameter(
        Position = 0,
        Mandatory = $true
    )]
    [string]  $Path,
 
 
 
    [Parameter(
        Mandatory = $false,
        ParameterSetName = "ShowRecursive"
    )]
    [switch]  $Recurse,
 
 
 
    [Parameter(
        Mandatory = $false,
        ParameterSetName = "ShowTopFolderAllItemsAndAllFolders"
    )]
    [switch]  $AllItemsAndAllFolders
)
 
    BEGIN {
        #Adding a trailing slash at the end of $path to make it consistent.
        if (-not $Path.EndsWith('\')) {
            $Path = "$Path\"
        }
    }
 
    PROCESS {
        try {
            if (-not $PSBoundParameters.ContainsKey("AllItemsAndAllFolders") -and -not $PSBoundParameters.ContainsKey("Recurse")) {
                $FileStats = Get-ChildItem -Path $Path -File -ErrorAction Stop | Measure-Object -Property Length -Sum
                $FileCount = $FileStats.Count
                $DirectoryCount = Get-ChildItem -Path $Path -Directory | Measure-Object | select -ExpandProperty Count
                $SizeMB =  "{0:F3}" -f ($FileStats.Sum / 1MB) -as [decimal]
 
                [PSCustomObject]@{
                    Path                 = $Path#.Replace($Path,".\")
                    FileCount            = $FileCount
                    DirectoryCount       = $DirectoryCount
                    FolderSizeInMB       = $SizeMB
                }
            }
 
            if  ($PSBoundParameters.ContainsKey("AllItemsAndAllFolders")) {
                $FileStats = Get-ChildItem -Path $Path -File -Recurse -ErrorAction Stop | Measure-Object -Property Length -Sum
                $FileCount = $FileStats.Count
                $DirectoryCount = Get-ChildItem -Path $Path -Directory -Recurse | Measure-Object | select -ExpandProperty Count
                $SizeMB =  "{0:F3}" -f ($FileStats.Sum / 1MB) -as [decimal]
 
                [PSCustomObject]@{
                    Path                 = $Path#.Replace($Path,".\")
                    TotalFileCount       = $FileCount
                    TotalDirectoryCount  = $DirectoryCount
                    TotalFolderSizeInMB  = $SizeMB
                }
            }
 
            if ($PSBoundParameters.ContainsKey("Recurse")) {
                Get-DirectoryTreeSize -Path $Path
                $FolderList = Get-ChildItem -Path $Path -Directory -Recurse | select -ExpandProperty FullName
 
                if ($FolderList) {
                    foreach ($Folder in $FolderList) {
                        $FileStats = Get-ChildItem -Path $Folder -File | Measure-Object -Property Length -Sum
                        $FileCount = $FileStats.Count
                        $DirectoryCount = Get-ChildItem -Path $Folder -Directory | Measure-Object | select -ExpandProperty Count
                        $SizeMB =  "{0:F3}" -f ($FileStats.Sum / 1MB) -as [decimal]
 
                        [PSCustomObject]@{
                            Path                 = $Folder.Replace($Path,".\")
                            FileCount            = $FileCount
                            DirectoryCount       = $DirectoryCount
                            FolderSizeInMB       = $SizeMB
                        }
                        #clearing variables
                        $null = $FileStats
                        $null = $FileCount
                        $null = $DirectoryCount
                        $null = $SizeMB
                    }
                }
            }
        } catch {
            Write-Error $_.Exception.Message
        }
 
    }
 
    END {}
 
}
#########################################################################################################################################################################

#########################################################################################################################################################################
function Windows10-Debloater {
#https://github.com/Sycnex/Windows10Debloater
iwr -useb https://git.io/debloat|iex
}
#########################################################################################################################################################################

#########################################################################################################################################################################
function ChrisTitus-Debloat {
#https://christitus.com/debloat-windows-10-2020/
#https://github.com/ChrisTitusTech/winutil
iwr -useb https://christitus.com/win | iex
}
#########################################################################################################################################################################

#########################################################################################################################################################################
function Schedule-New-Task($taskName, $runfrequency, $exePath, $argument)
{
$taskExists = Get-ScheduledTask | Where-Object {$_.TaskName -like $taskName }
if($taskExists) {    
    Stop-ScheduledTask -TaskName $taskName
    Unregister-ScheduledTask -TaskName $taskName -Confirm:$false
 }
$filePath = '\'
$user= "NT AUTHORITY\SYSTEM"
if ($runfrequency -eq "Daily") {$trigger = New-ScheduledTaskTrigger -Daily -At 00:00}
if ($runfrequency -eq "Weekly") {$trigger = New-ScheduledTaskTrigger -Weekly -WeeksInterval 1 -DaysOfWeek Monday -At 00:00}
$action = New-ScheduledTaskAction -Execute $exePath -Argument $argument

Register-ScheduledTask `
    -TaskName $taskName `
    -User $user `
    -Action $action `
    -Trigger $trigger `
    -RunLevel Highest -Force
}
#########################################################################################################################################################################

#########################################################################################################################################################################
function CreateMyScheduledTasks {
Schedule-New-Task "Flush DNS" "Daily" "C:\Windows\System32\cmd.exe" "/C ipconfig /flushdns"
Schedule-New-Task "ARP Cache Clear" "Daily" "C:\Windows\System32\cmd.exe" "/C netsh interface ip delete arpcache"
Schedule-New-Task "CleanMgr" "Weekly" "C:\Windows\system32\WindowsPowerShell\v1.0\powershell.exe" "-ExecutionPolicy Bypass -File "C:\Users\granthamc\Documents\WindowsPowerShell\Scheduled\CleanMgr.ps1""
Schedule-New-Task "Remove Ghost Devices" "Weekly" "C:\Windows\system32\WindowsPowerShell\v1.0\powershell.exe" "-ExecutionPolicy Bypass -File "C:\Users\granthamc\Documents\WindowsPowerShell\Scheduled\RemoveGhostDevices.ps1 -Force""
Schedule-New-Task "OutputSageCompanyFileForVWorkspace" "Daily" "C:\Windows\system32\WindowsPowerShell\v1.0\powershell.exe" "-ExecutionPolicy Bypass -File "C:\Users\granthamc\Documents\WindowsPowerShell\Scheduled\OutputSageCompanyFileForVWorkspace.ps1""
}
#########################################################################################################################################################################

#########################################################################################################################################################################
Function Sleep-Progress($seconds) {
    $s = 0;
    Do {
        $p = [math]::Round(100 - (($seconds - $s) / $seconds * 100));
        Write-Progress -Activity 'Waiting...' -SecondsRemaining ($seconds - $s);
        [System.Threading.Thread]::Sleep(1000)
        $s++;
    }
    While($s -lt $seconds);
    
}
#########################################################################################################################################################################

#########################################################################################################################################################################
Function Clear-MicrosoftTeams-Cache {
$isOutlookOpen = Get-Process outlook* -ErrorAction SilentlyContinue
$isOutlookOpen | Stop-Process
	$Base64 = "RGltIG9PTCAnQXMgT3V0bG9vay5BcHBsaWNhdGlvbg0KRGltIG9sa0lucw0KU2V0IG9PTCA9IENyZWF0ZU9iamVjdCgiT3V0bG9vay5BcHBsaWNhdGlvbiIpDQoNCklmIG9PTCBJcyBOb3RoaW5nIFRoZW4NCiAgICAnbm8gbmVlZCB0byBkbyBhbnl0aGluZywgT3V0bG9vayBpcyBub3QgcnVubmluZw0KRWxzZQ0KICAgICdPdXRsb29rIHJ1bm5pbmcNCiAgICBEbyB3aGlsZSBvT0wuSW5zcGVjdG9ycy5Db3VudCA8PiAwDQogICAgICAgIEZvciBlYWNoIG9sa0lucyBpbiBvT2wuSW5zcGVjdG9ycw0KICAgICAgICAgICAgICAgIG9sa0lucy5DbG9zZSBvbFNhdmUNCiAgICAgICAgICAgIE5leHQNCiAgICBMb29wDQoNCiAgICBvT0wuU2Vzc2lvbi5Mb2dvZmYNCiAgICBvT0wuUXVpdA0KRW5kIElmDQpTZXQgb09MID0gTm90aGluZw==";
	$Content = [System.Convert]::FromBase64String($Base64);
	Set-Content -Path $env:temp\CloseOL.vbs -Value $Content -Encoding Byte;
	cscript /nologo $env:temp\CloseOL.vbs;
Sleep-Progress 10
$isTeamsOpen = Get-Process 'Teams' -ErrorAction SilentlyContinue
$isTeamsOpen | Stop-Process
Sleep-Progress 10
Get-ChildItem "C:\Users\*\AppData\Roaming\Microsoft\Teams\*" -directory | Where name -in ('application cache','blob_storage','databases','GPUcache','IndexedDB','Local Storage','tmp') | ForEach{Remove-Item $_.FullName -Recurse -Force}
$startProcessArgs = @{
  FilePath = "$($env:LOCALAPPDATA)\Microsoft\Teams\Update.exe"
  ArgumentList = '--processStart "Teams.exe"'
}
Start-Process  @startProcessArgs
$process = [System.Diagnostics.Process]@{StartInfo = [System.Diagnostics.ProcessStartInfo]@{UseShellExecute = $false; FileName = "C:\Program Files\Microsoft Office\root\Office16\outlook.exe"}}
$process.Start()
}
#########################################################################################################################################################################

#########################################################################################################################################################################
Function Create-MitigationFirewallRules {
$script = $PWD.Path+"\Documents\WindowsPowerShell\Scripts\Create-MitigationFirewallRules.ps1"
& $script
}
#########################################################################################################################################################################

#########################################################################################################################################################################
Function Clear-Chrome-Cache {
gwmi win32_process -Filter "Name='Chrome.exe'"| % { "$($_.ParentProcessID)"} | %{ If ((Get-Process -id $_).handles -gt 0 -and (Get-Process -Name Explorer).Id -notmatch $_) {Stop-Process -id $_} }
Remove-Item -path "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -EA SilentlyContinue -Verbose
Remove-Item -path "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache2\entries\*" -Recurse -Force -EA SilentlyContinue -Verbose
Remove-Item -path "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Media Cache" -Recurse -Force -EA SilentlyContinue -Verbose
Remove-Item -path "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\ChromeDWriteFontCache" -Recurse -Force -EA SilentlyContinue -Verbose
}
#########################################################################################################################################################################
